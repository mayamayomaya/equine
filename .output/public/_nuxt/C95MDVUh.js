import{a0 as i}from"#entry";const d=i("workspace",{state:()=>({workspaces:[],currentWorkspaceId:null,searchQuery:"",stats:{rescheduleCount:0}}),getters:{currentWorkspace:e=>e.workspaces.find(r=>r.id===e.currentWorkspaceId)||null,currentTasks:e=>e.workspaces.find(s=>s.id===e.currentWorkspaceId)?.tasks||[],filteredCurrentTasks:e=>{let s=e.workspaces.find(t=>t.id===e.currentWorkspaceId)?.tasks||[];if(e.searchQuery){const t=e.searchQuery.toLowerCase();s=s.filter(o=>o.text.toLowerCase().includes(t))}return s},completedCount:e=>e.workspaces.find(s=>s.id===e.currentWorkspaceId)?.tasks.filter(s=>s.completed).length||0,globalSearchResults:e=>{if(!e.searchQuery)return[];const r=e.searchQuery.toLowerCase(),s=[];return e.workspaces.forEach(t=>{t.tasks?.forEach(o=>{o.text.toLowerCase().includes(r)&&s.push({...o,workspaceName:t.name,workspaceId:t.id})})}),s},overdueCount:e=>{const r=e.workspaces.find(t=>t.id===e.currentWorkspaceId);if(!r)return 0;const s=new Date;return s.setHours(0,0,0,0),r.tasks.filter(t=>{if(!t.due||t.completed)return!1;const o=new Date(t.due);return o.setHours(0,0,0,0),o<s}).length}},actions:{loadFromStorage(){this.workspaces=JSON.parse(localStorage.getItem("equine-workspaces")||"[]"),this.stats=JSON.parse(localStorage.getItem("equine-stats")||"{}"),this.workspaces.forEach(e=>{e.tasks?.forEach(r=>{r.completed===void 0&&(r.completed=!1,r.completedAt=null)})}),this.currentWorkspaceId=localStorage.getItem("current-workspace")||null,this.saveToStorage()},saveToStorage(){localStorage.setItem("equine-workspaces",JSON.stringify(this.workspaces)),localStorage.setItem("equine-stats",JSON.stringify(this.stats||{})),this.currentWorkspaceId&&localStorage.setItem("current-workspace",this.currentWorkspaceId)},setCurrentWorkspace(e){this.currentWorkspaceId=e,this.saveToStorage()},addWorkspace(e){this.workspaces.push(e),this.currentWorkspaceId=e.id,this.saveToStorage()},deleteWorkspace(e){this.workspaces=this.workspaces.filter(r=>r.id!==e),this.currentWorkspaceId===e&&(this.currentWorkspaceId=this.workspaces[0]?.id||null),this.saveToStorage()},renameWorkspace(e,r){const s=this.workspaces.find(t=>t.id===e);s&&(s.name=r,this.saveToStorage())},updateTaskInWorkspace(e,r,s){const t=this.workspaces.find(o=>o.id===e);if(t){const o=t.tasks.findIndex(a=>a.id===r);o!==-1&&(t.tasks[o]={...t.tasks[o],...s},this.saveToStorage())}},updateCurrentTasks(e){const r=this.workspaces.find(s=>s.id===this.currentWorkspaceId);r&&(r.tasks=e,this.saveToStorage())},setSearchQuery(e){this.searchQuery=e},clearSearch(){this.searchQuery=""},toggleTaskComplete(e){const r=this.workspaces.find(s=>s.id===this.currentWorkspaceId);if(r){const s=r.tasks.find(t=>t.id===e);s&&(s.completed=!s.completed,s.completedAt=s.completed?new Date().toISOString():null,this.saveToStorage())}},clearCompleted(){const e=this.workspaces.find(r=>r.id===this.currentWorkspaceId);e&&(e.tasks=e.tasks.filter(r=>!r.completed),this.saveToStorage())},rescheduleOverdueTasks(){const e=this.workspaces.find(t=>t.id===this.currentWorkspaceId);if(!e)return;const r=new Date().toISOString().split("T")[0];let s=0;return e.tasks.forEach(t=>{if(t.due&&!t.completed){const o=new Date(t.due),a=new Date;a.setHours(0,0,0,0),o.setHours(0,0,0,0),o<a&&(t.due=r,t.rescheduledAt=new Date().toISOString(),t.rescheduleCount=(t.rescheduleCount||0)+1,s++)}}),s>0&&(this.stats.rescheduleCount=(this.stats.rescheduleCount||0)+s,this.saveToStorage()),s},getOverdueCount(){const e=this.workspaces.find(s=>s.id===this.currentWorkspaceId);if(!e)return 0;const r=new Date;return r.setHours(0,0,0,0),e.tasks.filter(s=>{if(!s.due||s.completed)return!1;const t=new Date(s.due);return t.setHours(0,0,0,0),t<r}).length},moveTaskToWorkspace(e,r,s){const t=this.workspaces.find(c=>c.id===r),o=this.workspaces.find(c=>c.id===s);if(!t||!o)return!1;const a=t.tasks.findIndex(c=>c.id===e);if(a===-1)return!1;const[n]=t.tasks.splice(a,1);return o.tasks.push(n),this.saveToStorage(),!0}}});export{d as u};
